4. Quality filtering and reformatting
	a. Concatenate all Split results into a single file; remove headers from Deletion results
	b. Reformat and filter VCF file to remove extraneous columns and information, and reorganize columns
	c. Run Deletion results file through orientation script - adds Orientation column, also removes calls without clear RepeatMasker reference call
	d. Secondary reformatting of MELT-Split and MELT-Deletion results
	e. Remove duplicate/ambiguous MELT calls from combined MELT results
	f. Convert final filtered MELT-Split calls into single base insertions at POS base position.
	g. Filter/separate final filtered and reformatted MELT results into desired data subsets
  
  
  (4) Quality filtering and reformatting
	## NOTE: Info of MELT result info columns
		##INFO=<ID=ASSESS,Number=1,Type=Integer,Description="Provides information on evidence availible to decide insertion site.0 = No overlapping reads at site;1 = Imprecise breakpoint due to greater than expected distance between evidence;2 = discordant pair evidence only -- No split read information;3 = left side TSD evidence only;4 = right side TSD evidence only;5 = TSD decided with split reads, highest possible quality">
		##INFO=<ID=TSD,Number=1,Type=String,Description="Precise Target Site Duplication for bases, if unknown, value will be NULL">
		##INFO=<ID=INTERNAL,Number=2,Type=String,Description="If insertion internal or close to a gene, listed here followed by a discriptor of the location in the gene (either INTRON, EXON_#, 5_UTR, 3_UTR, PROMOTER, or TERMINATOR). If multiple genes intersected, will be seperated by '\|'">
		##INFO=<ID=SVTYPE,Number=1,Type=String,Description="Type of structural variant">
		##INFO=<ID=SVLEN,Number=1,Type=Integer,Description="Difference in length between REF and ALT alleles; If unknown, will be -1">
		##INFO=<ID=MEINFO,Number=4,Type=String,Description="Mobile element info of the form NAME,START,END,POLARITY; If START or END is unknown, will be -1; If POLARITY is unknown, will be 'null'">
		##INFO=<ID=DIFF,Number=.,Type=String,Description="Coverage and Differences in relation to the HAL1v1Em10 reference. Form is %2XCoverage:Differences, with differences delimited by ','">
		##INFO=<ID=LP,Number=1,Type=Integer,Description="Total number of discordant pairs supporting the left side of the breakpont">
		##INFO=<ID=RP,Number=1,Type=Integer,Description="Total number of discordant pairs supporting the right side of the breakpont">
		##INFO=<ID=RA,Number=1,Type=Float,Description="Ratio between LP and RP, reported as log2(LP / RP)">
		##INFO=<ID=PRIOR,Number=1,Type=String,Description="True if this site was not discovered in this dataset, but was included on a provided priors list">
		##INFO=<ID=SR,Number=1,Type=Integer,Description="Total number of SRs at the estimated breakpoint for this site. Recomended to filter sites with <= 2 SRs">
		##INFO=<ID=ISTP,Number=1,Type=Integer,Description="Will be approximate location of twin priming breakpoint in relation to L1 reference; 0 if not twin primed; -1 if no measurement">
		##FILTER=<ID=s25,Description="Greater than 25.0% of samples do not have data">
		##FILTER=<ID=rSD,Description="Ratio of LP to RP is greater than 2.0 standard deviations">
		##FILTER=<ID=hDP,Description="More than the expected number of discordant pairs at this site are also split">
		##FILTER=<ID=ac0,Description="No individuals in this VCF file were identified with this insertion">
		##FILTER=<ID=lc,Description="MEI is embedded in a low complexity region">
		##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">
		##FORMAT=<ID=GL,Number=3,Type=Float,Description="Genotype likelihood">

	(4a) Concatenate all Split results into single file
	for i in mut8 mut10 mut15; do cd /lustre/scratch/npaulat/MELTv2.1.5/MELT/${i};
	ls | grep -V del | cat *.vcf > ${i}_SPLIT_results.vcf; done
	
	## or concatenate all Split results into single file (per each mutation rate set)
	for i in *.vcf; do grep -v "#" ${i} >> mut8_SPLIT_results.bed; done
	for i in *.vcf; do grep -v "#" ${i} >> mut10_SPLIT_results.bed; done
	for i in *.vcf; do grep -v "#" ${i} >> mut15_SPLIT_results.bed; done
	
	## Remove headers from Deletion results
	for i in mut8 mut10 mut15; do grep -v "#" ${i}/del/*.vcf > ${i}_DELETION_results.bed; done
	
	(4b) Reformat and filter VCF file to remove extraneous columns and information, and reorganize columns
	## Also performs initial filtering based on:
		## 1) PASS flag
		## 2) ASSESS >= 2
		## 3) exclude any hits with indeterminate (./.) genotypes
		## 4) exclude any hits < 5kb from scaffold edge (POS)
	## Script also adds in appropriate genotype column for reference genome (M. myotis), and MODULE column (Split or Deletion)
	## !!!NOTE: MELT-Deletion genotypes are inverted compared to MELT-Split, so script additionally inverts the genotypes of MELT-Deletion results to be directly comparable to MELT-Split results
	## This is because from the standpoint of Deletion, we are looking for known insertions therefore the default allele (0) is “insertion present” and the alternate allele (1) is “insertion absent”.  Super confusing and not at all clear from the documentation.
	## For MELT split 1/1= insertion present, 0/1= heterozygous, 0/0= insertion absent
	## For MELT deletion 1/1 = insertion absent, 0/1 = heterozygous, 0/0 = insertion present
	
	for i in 8 10 15; do python format_MELT.py -i /lustre/scratch/npaulat/MELTv2.1.5/filtering/mut${i}_SPLIT_results.bed -m split -r ${i}; done
	
	for i in 8 10 15; do python format_MELT.py -i /lustre/scratch/npaulat/MELTv2.1.5/filtering/mut${i}_DELETION_results.bed -m del -r ${i}; done
	
	(4c) Run Deletion results file through orientation script - adds Orientation column, also removes calls without clear RepeatMasker reference call
	## MELT Deletion results are TE calls based off of the reference genome's known TE sites, via RepeatMasker, and as such (irritatingly) the VCF does not include the orientation of the call (since it is in the input .bed file)
	## The add_del_orientation.py script adds the orientation of a TE insertion back into the results file
	## Script also removes any MELT calls that are not close enough to the original RM call to determine which one it is (quality filtering)
		## The input is 1) MELT Deletion filtered and reformatted results in .bed format from step 4b, 2) RepeatMasker .out.bed file of TEs of interest (from step 1d/3c)
		## To make the Deletion.bed file, run DELETION.vcf through format_MELT.py in 4b
	## HOW IT WORKS:
	## The add_del_orientation.py script creates a dictionary of the MELT Deletion results in a basic .bed format, the allTEs_filtered.out.bed, and then compares the keys and key values in the dictionaries.
	## If the chromosome/scaffold names match, it checks the TE name (e.g. HAL1-1B_ML)
	## If the TE names match, it checks if the start positions are within 50 bases of each other
	## It makes a list of all possible matches within 50 bases of the called start position
	## If there is only one match, the orientation of that call is added to the output MELT .bed file
	## If there are multiple possible matches, it choses the one that has the start position closest to the MELT call (this is an uncommon situation, generally)
	## If there are no matching calls within 50 bases, the orientation "NONE" is added to the output .bed file
	## All calls are kept in the main output .bed file, because then the columns can be easily inserted into the main MELT results spreadsheet, and the "NONE" calls filtered out and removed there, instead of trying to figure out which few calls were removed in the script

	for i in mut8 mut10 mut15; do python add_del_orientation2.py -i /lustre/scratch/npaulat/MELTv2.1.5/MELT/filtering/${i}_DEL_filtered_all_hits_orient.bed -r /lustre/scratch/npaulat/MELTv2.1.5/references/beds/mMyo_higher_score_rm_format_sorted.bed -od /lustre/scratch/npaulat/MELTv2.1.5/MELT/filtering/; done
	
	(4d) Secondary reformatting of MELT-Split and MELT-Deletion results
	## Use cat_myotis_assess_MELT.py to arbitrarily assign flag ASSESS=4 to MELT-Deletion calls, giving them a high MELT quality score that allows comparison to MELT-Split calls during filtering;
	## Concatenate the reformatted Split and Deletion results and sort by #CHROM and POS;
	## Also renames MELT-Split SVTYPE to original RepeatMasker TE name, and assigns a TE category (TYPE) column to each call, for filtering
		## Since MELT-Split limits input names, they differ from the reference (RM) names used in MELT-Deletion
	
	for i in mut8 mut10 mut15; do python cat_assess_MELT.py -s {i}_SPLIT_filtered.bed -del {i}_DEL_filtered.bed -mt myotis_zip_te_names.txt -lib myotis_te_list.txt -tecat te_lib_categories.txt; done
	
	(4e) Remove duplicate/ambiguous MELT calls from combined MELT results
	## Using rm_myotis_dups_assess_cat.py
		### Input format is CHROM, POS, END, ASSESS, SVTYPE, SVLENGTH, ORIENTATION, GENOTYPES 1-11, MODULE
	## Generally speaking, removes exact duplicates, overlapping or <50 bp apart TE hits (ambiguous), or overlapping calls that are for the same TE type (e.g. Ves SINE hits)
	## For multiple Ves SINE calls at a given site (start POS within +/- 15 bp), the calls must have the same orientation and genotypes across all species. If yes, then the script will pick the TE call with the highest ASSESS quality (2-5) and/or the longest insertion length. If the TE call cluster does not meet this criteria, all calls in the cluster are excluded as ambiguous calls.
	
	python rm_myotis_dups_assess_cat.py -i /lustre/scratch/npaulat/MELT/analyze_variants/mut10_cat_assess_dups.bed
	
	(4f) Convert final filtered MELT-Split calls into single base insertions at POS base position.
	## This is to reflect that non-reference TE insertions will not be present in the reference genome assembly, and so SNV/indels will be examined around the reference position where the TE inserted in non-reference species/individual
	## Also removes any hits that are < 10kb from the end of a scaffold to limit any effects of misassembly on scaffold edges
	
	python cat_myotis_split_to_point.py -i mut10_cat_assess_dupsless_melthits.bed -in /lustre/scratch/npaulat/MELT/combined_references/mMyoMyo_m19_AffsNnoesSC.p1.fa.fai
	
	##Rename output file as desired
	
	cp mut10_cat_assess_final_tosort.bed > mut10_cat_final.bed
	
	(4g) Filter/separate final filtered and reformatted MELT results into desired data subsets
	## In this case, I made a script that sorted based on species pairs (reference species x another species), call type (reference/non-reference AKA Split/Deletion), and TE type (based on TE category [TYPE])
	## Script also makes additional subsets (New World vs Old World species comparisons, etc), but these resulted in too few hits for a robust analysis.
	
	python sort_myotis_melt_hits_sp_and_ref2.py -i mut10_cat_final.bed -m 10
